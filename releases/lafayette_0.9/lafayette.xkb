//
// File          : lafayette.xkb
// Project page  : https://github.com/fabi1cazenave/qwerty-lafayette
// Author        : Fabien Cazenave (:kazé)
// Version       : 0.9
// Last change   : 2024-01-27
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Qwerty-Lafayette)
//
// To apply this keymap, use:
//   xkbcomp -w9 lafayette.xkb $DISPLAY
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ ~   ┃ ! „ │ @ “ │ # ” │ $ ¢ │ % ‰ ┃ ^   │ &   │ *   │ (   │ )   ┃ _   ┆ + ± ┆
  // ┆ `   ┃ 1 ¡ │ 2 « │ 3 » │ 4 £ │ 5 € ┃ 6 ¥ │ 7 ¤ │ 8 § │ 9 ¶ │ 0 ° ┃ - — ┆ = ≠ ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ Q   │ W   │ E   │ R   │ T   ┃ Y   │ U   │ I   │ O   │ P   ┃ {   ┆ }   ┆
  //       ┃   æ │   é │   è │     │     ┃     │   ù │   ï │   œ │     ┃ [   ┆ ]   ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ A   │ S   │ D   │ F ª │ G   ┃ H   │ J   │ K   │ L   │**   ┃ "   ┆ |   ┆
  //       ┃   à │   ß │   ê │   - │   – ┃   ŷ │   û │   î │   ô │***¨ ┃ '   ┆ \   ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ >   ┃ Z   │ X   │ C   │ V _ │ B   ┃ N   │ M º │ ; • │ :   │ ? ÷ ┃
  // ┆ <   ┃   â │   × │   ç │   _ │   — ┃   ñ │   µ │ , · │ . … │ / ¿ ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │     │     │     │   ‰ ┃  *^ │  *µ │   × │  *´ │  *` ┃     ┆     ┆
  //       ┃   @ │   < │   > │   $ │   % ┃   ^ │   & │   * │   ' │   ` ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │   ⁽ │   ⁾ │     │   ≃ ┃     │   ± │   ¬ │   ÷ │  *¨ ┃     ┆     ┆
  //       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃  *~ │     │     │     │     ┃     │     │  *¸ │     │     ┃
  // ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ! │   ; │   : │   ? ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "lafayette" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "French (Qwerty-Lafayette)";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , exclamdown      , U201E           ],[ U2081           , onesuperior     ]}; // 1 ! ¡ „ ₁ ¹
    key <AE02> {[ 2               , at              , guillemotleft   , U201C           ],[ U2082           , twosuperior     ]}; // 2 @ « “ ₂ ²
    key <AE03> {[ 3               , numbersign      , guillemotright  , U201D           ],[ U2083           , threesuperior   ]}; // 3 # » ” ₃ ³
    key <AE04> {[ 4               , dollar          , sterling        , cent            ],[ U2084           , U2074           ]}; // 4 $ £ ¢ ₄ ⁴
    key <AE05> {[ 5               , percent         , EuroSign        , U2030           ],[ U2085           , U2075           ]}; // 5 % € ‰ ₅ ⁵
    key <AE06> {[ 6               , asciicircum     , yen             , VoidSymbol      ],[ U2086           , U2076           ]}; // 6 ^ ¥   ₆ ⁶
    key <AE07> {[ 7               , ampersand       , currency        , VoidSymbol      ],[ U2087           , U2077           ]}; // 7 & ¤   ₇ ⁷
    key <AE08> {[ 8               , asterisk        , section         , VoidSymbol      ],[ U2088           , U2078           ]}; // 8 * §   ₈ ⁸
    key <AE09> {[ 9               , parenleft       , paragraph       , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 ( ¶   ₉ ⁹
    key <AE10> {[ 0               , parenright      , degree          , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 ) °   ₀ ⁰

    // Letters, first row
    key <AD01> {[ q               , Q               , ae              , AE              ],[ at              , VoidSymbol      ]}; // q Q æ Æ @
    key <AD02> {[ w               , W               , eacute          , Eacute          ],[ less            , lessthanequal   ]}; // w W é É < ≤
    key <AD03> {[ e               , E               , egrave          , Egrave          ],[ greater         , greaterthanequal]}; // e E è È > ≥
    key <AD04> {[ r               , R               , VoidSymbol      , VoidSymbol      ],[ dollar          , VoidSymbol      ]}; // r R     $
    key <AD05> {[ t               , T               , VoidSymbol      , VoidSymbol      ],[ percent         , U2030           ]}; // t T     % ‰
    key <AD06> {[ y               , Y               , VoidSymbol      , VoidSymbol      ],[ asciicircum     , dead_circumflex ]}; // y Y     ^ ^
    key <AD07> {[ u               , U               , ugrave          , Ugrave          ],[ ampersand       , dead_greek      ]}; // u U ù Ù & µ
    key <AD08> {[ i               , I               , idiaeresis      , Idiaeresis      ],[ asterisk        , multiply        ]}; // i I ï Ï * ×
    key <AD09> {[ o               , O               , oe              , OE              ],[ apostrophe      , dead_acute      ]}; // o O œ Œ ' ´
    key <AD10> {[ p               , P               , VoidSymbol      , VoidSymbol      ],[ grave           , dead_grave      ]}; // p P     ` `

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          ],[ braceleft       , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ s               , S               , ssharp          , U1E9E           ],[ parenleft       , U207D           ]}; // s S ß ẞ ( ⁽
    key <AC03> {[ d               , D               , ecircumflex     , Ecircumflex     ],[ parenright      , U207E           ]}; // d D ê Ê ) ⁾
    key <AC04> {[ f               , F               , minus           , ordfeminine     ],[ braceright      , VoidSymbol      ]}; // f F - ª }
    key <AC05> {[ g               , G               , endash          , VoidSymbol      ],[ equal           , similarequal    ]}; // g G –   = ≃
    key <AC06> {[ h               , H               , U0177           , U0176           ],[ backslash       , VoidSymbol      ]}; // h H ŷ Ŷ \ 
    key <AC07> {[ j               , J               , ucircumflex     , Ucircumflex     ],[ plus            , plusminus       ]}; // j J û Û + ±
    key <AC08> {[ k               , K               , icircumflex     , Icircumflex     ],[ minus           , notsign         ]}; // k K î Î - ¬
    key <AC09> {[ l               , L               , ocircumflex     , Ocircumflex     ],[ slash           , division        ]}; // l L ô Ô / ÷
    key <AC10> {[ ISO_Level3_Latch, ISO_Level3_Latch, dead_diaeresis  , VoidSymbol      ],[ quotedbl        , dead_diaeresis  ]}; // *¨ *¨ ¨   " ¨

    // Letters, third row
    key <AB01> {[ z               , Z               , acircumflex     , Acircumflex     ],[ asciitilde      , dead_tilde      ]}; // z Z â Â ~ ~
    key <AB02> {[ x               , X               , multiply        , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // x X ×   [
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ bracketright    , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ v               , V               , underscore      , underscore      ],[ underscore      , VoidSymbol      ]}; // v V _ _ _
    key <AB05> {[ b               , B               , emdash          , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // b B —   #
    key <AB06> {[ n               , N               , ntilde          , Ntilde          ],[ bar             , brokenbar       ]}; // n N ñ Ñ | ¦
    key <AB07> {[ m               , M               , mu              , masculine       ],[ exclam          , VoidSymbol      ]}; // m M µ º !
    key <AB08> {[ comma           , semicolon       , periodcentered  , U2022           ],[ semicolon       , dead_cedilla    ]}; // , ; · • ; ¸
    key <AB09> {[ period          , colon           , ellipsis        , VoidSymbol      ],[ colon           , VoidSymbol      ]}; // . : …   :
    key <AB10> {[ slash           , question        , questiondown    , division        ],[ question        , VoidSymbol      ]}; // / ? ¿ ÷ ?

    // Pinky keys
    key <AE11> {[ minus           , underscore      , emdash          , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _ —
    key <AE12> {[ equal           , plus            , notequal        , plusminus       ],[ VoidSymbol      , VoidSymbol      ]}; // = + ≠ ±
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           ],[ space           , nobreakspace    ]}; //     ’ ’

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
